#perform forward best subset selection
regfit.fwd = regsubsets(sugars~., cereal, method = "forward", nvmax = 7)
#perform backward best subset selection
regfit.bwd = regsubsets(sugars~., cereal, method = "backward", nvmax = 7)
#the coeffs are different?
coef(regfit.fwd,7)
coef(regfit.bwd,7)
reg.summary = summary(regfit.fwd)
par = (mfrow = c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
par = (mfrow = c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
points(6,reg.summary$adjr2[6], col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
#check the largest adjusted R^2 statistic
which.max(reg.summary$adjr2)
#highlight point 6 at the graph
points(6,reg.summary$adjr2[6], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
#minimum point of cp
min.cp = which.min(reg.summary$cp)
points(min.cp ,reg.summary$cp [min.cp ],col="red",cex=2,pch=20)
#minimum point of bic
min.bic <- which.min(reg.summary$bic )
#plot the bic
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(min.bic ,reg.summary$bic [min.bic ],col="red",cex=2,pch=20)
coef(regfit.fwd,7)
View(BreastCancer_full)
BreastCancer <- BreastCancer_full[,1:11]
BreastCancer<- drop_na(BreastCancer)
attach(BreastCancer)
cor(sapply(BreastCancer[,-1],as.numeric))
reg.fit <- glm(diagnosis~., data = BreastCancer, family = binomial)
summary(reg.fit)
skulls <- data("Skulls")
skulls <- data("Skulls")
#BEFORE STARTING OUR CLASS, PLEASE RUN THIS SNIPPET TO INSTALL/LOAD OUR LIBRARIES NEEDED FOR THIS LESSON
packages_needed <- c('car', 'MASS', 'HSAUR')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
#load the skulls dataset
skulls <- data("Skulls")
#load the skulls dataset
skulls <- data("skulls")
#BEFORE STARTING OUR CLASS, PLEASE RUN THIS SNIPPET TO INSTALL/LOAD OUR LIBRARIES NEEDED FOR THIS LESSON
packages_needed <- c('car', 'MASS', 'HSAUR')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
#load the skulls dataset
data("skulls", package = "HSAUR")
View(skulls)
means <- tapply(1:nrow(skulls), skulls$epoch, function(i)
apply(skulls[i,colnames(skulls)[-1]], 2, mean))
means <- matrix(unlist(means), nrow = length(means), byrow = TRUE)
View(means)
colnames(means) <- colnames(skulls)[-1]
rownames(means) <- levels(skulls$epoch)
pairs(means,
panel = function(x, y) {
text(x, y, levels(skulls$epoch))
})
View(means)
write.csv(skulls, "skulls.csv", row.names = F)
skulls <- red.csv("skulls.csv", header = T)
skulls <- read.csv("skulls.csv", header = T)
m.skulls <- melt(skulls)
packages_needed <- c('car', 'MASS', 'HSAUR',  'reshape2')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
m.skulls <- melt(skulls)
View(m.skulls)
m.skulls$epoch
m.skulls$variable
m.skulls$variable[1]
m.skulls$variable[2]
m.skulls$epoch[1]
skulls
skulls$mb[epoch == 'caD150']
skulls$mb[skull$epoch == 'caD150']
skulls$mb[skulls$epoch == 'caD150']
skulls$mb[skulls$epoch == 'cAD150']
skull.colnames <- colnames(skulls)
skull.colnames <- unique(skulls$epoch)
skulls$mb[skulls$epoch == 'cAD150']
skull.colnames[[1]]
skull.colnames[1]
skull.colnames <- as.character(unique(skulls$epoch))
#lets take a look at boxplots
boxplot(c(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
boxplot(matrix(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
#lets take a look at boxplots
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = skull.colnames, ylab = "maximum breadth")
#lets take a look at boxplots
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = epochs,
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#lets take a look at boxplots
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
c(skulls$mb[skulls$epoch == skull.colnames[1]]
\\]
subset(x= skull.colnames, subset = mb)
attach(skulls)
subset(x= skull.colnames, sub
)
subset(x= skulls, subset = mb)
subset(x= skulls, subset = mb)
subset(x= skulls, subset = skulls.mb)
subset(x= skulls, subset = skulls$mb)
skulls$mb
c(skulls$epoch,skulls$mb)
#lets take a look at boxplots
boxplot( data.frame(skulls$epoch, skulls$mb), las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
data.frame(skulls$epoch, skulls$mb)
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]], skulls$mb[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
boxplot(data.frame(skulls$bh[skulls$epoch == skull.colnames[1]], skulls$bh[skulls$epoch == skull.colnames[2]],
skulls$bh[skulls$epoch == skull.colnames[3]], skulls$bh[skulls$epoch == skull.colnames[4]], skulls$bh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
View(skulls)
#basialiveolar length
boxplot(data.frame(skulls$bl[skulls$epoch == skull.colnames[1]], skulls$bl[skulls$epoch == skull.colnames[2]],
skulls$bl[skulls$epoch == skull.colnames[3]], skulls$bl[skulls$epoch == skull.colnames[4]], skulls$bl[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#nasal length
boxplot(data.frame(skulls$nh[skulls$epoch == skull.colnames[1]], skulls$nh[skulls$epoch == skull.colnames[2]],
skulls$nh[skulls$epoch == skull.colnames[3]], skulls$nh[skulls$epoch == skull.colnames[4]], skulls$nh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#lets take a look at boxplots
par(nrow(2,2))
#mb
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]], skulls$mb[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#basibregmatic height
boxplot(data.frame(skulls$bh[skulls$epoch == skull.colnames[1]], skulls$bh[skulls$epoch == skull.colnames[2]],
skulls$bh[skulls$epoch == skull.colnames[3]], skulls$bh[skulls$epoch == skull.colnames[4]], skulls$bh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#basialiveolar length
boxplot(data.frame(skulls$bl[skulls$epoch == skull.colnames[1]], skulls$bl[skulls$epoch == skull.colnames[2]],
skulls$bl[skulls$epoch == skull.colnames[3]], skulls$bl[skulls$epoch == skull.colnames[4]], skulls$bl[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#nasal length
boxplot(data.frame(skulls$nh[skulls$epoch == skull.colnames[1]], skulls$nh[skulls$epoch == skull.colnames[2]],
skulls$nh[skulls$epoch == skull.colnames[3]], skulls$nh[skulls$epoch == skull.colnames[4]], skulls$nh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#lets take a look at boxplots
par(mfrow = c(2, 2))
#mb
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]], skulls$mb[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#basibregmatic height
boxplot(data.frame(skulls$bh[skulls$epoch == skull.colnames[1]], skulls$bh[skulls$epoch == skull.colnames[2]],
skulls$bh[skulls$epoch == skull.colnames[3]], skulls$bh[skulls$epoch == skull.colnames[4]], skulls$bh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#basialiveolar length
boxplot(data.frame(skulls$bl[skulls$epoch == skull.colnames[1]], skulls$bl[skulls$epoch == skull.colnames[2]],
skulls$bl[skulls$epoch == skull.colnames[3]], skulls$bl[skulls$epoch == skull.colnames[4]], skulls$bl[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#nasal length
boxplot(data.frame(skulls$nh[skulls$epoch == skull.colnames[1]], skulls$nh[skulls$epoch == skull.colnames[2]],
skulls$nh[skulls$epoch == skull.colnames[3]], skulls$nh[skulls$epoch == skull.colnames[4]], skulls$nh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
multivar.exp1 <- manova( c(nb, bh, bl, nh) ~ epochs, data = skulls)
multivar.exp1 <- manova( c(mb, bh, bl, nh) ~ epochs, data = skulls)
multivar.exp1 <- manova( c(mb, bh, bl, nh) ~ epoch, data = skulls)
multivar.exp1 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
View(multivar.exp1)
summary(multivar.exp1)
cor.test(cbind(mb, bh, bl, nh) )
cor.test(cbind(mb, bh, bl, nh))
cor.test(mb,bh)
cor.test(mb,nh)
cor(cbind(mb, bh, bl, nh) )
summary.aov(multivar.exp1)
cor(skulls)
cor.test(mb,epoch)
View(skulls)
multivar.exp2 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls, subset = epoch %in% c("c4000BC", "c200BC"))
summary(multivar.exp2)
summary.aov(multivar.exp2)
cor.test(mb,nh)
multivar.exp1 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls, test = "pillai")
multivar.exp1 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls, test = "Pillai")
multivar.exp1 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls, test = "Wilks")
summary(multivar.exp1, test = "Wilks")
summary(multivar.exp1, test = "Pillai")
summary(multivar.exp1, test = "Hotelling-Lawley")
packages_needed <- c('car', 'MASS', 'HSAUR',  'reshape2', 'mvnormtest')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
mshapiro.test(cbind(mb, bh, bl, nh))
mshapiro.test(skulls)
mshapiro.test(mb)
mshapiro.test(as.matrix(mb, bh, bl, nh))
as.matrix(mb, bh, bl, nh)
mshapiro.test(cbind(mb, bh, bl, nh))
mshapiro.test(skulls[,2:])
mshapiro.test(skulls[,2:4])
mshapiro.test(skulls[,2:5])
skulls[,2:5]
mshapiro.test(data.matrix(skulls[,2:5]))
mshapiro.test(t(data.matrix(skulls[,2:5])))
leveneTest(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
leveneTest(mb ~ epoch, data = skulls)
packages_needed <- c('car', 'MASS', 'HSAUR',  'reshape2', 'mvnormtest', 'mvoutlier')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
x <- as.matrix(skulls[,2:5]) # n x p numeric matrix
center <- colMeans(x) # centroid
n <- nrow(x); p <- ncol(x); cov <- cov(x);
d <- mahalanobis(x,center,cov) # distances
qqplot(qchisq(ppoints(n),df=p),d,
main="QQ Plot Assessing Multivariate Normality",
ylab="Mahalanobis D2")
abline(a=0,b=1)
bartlett.test(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
fligner.test(cbind(mb, bh, bl, nh) ~ epoch, data=skulls)
epoch
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(skulls[,2:5] ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
fligner.test(c(mb, bh, bl, nh) ~ epoch, data=skulls)
bartlett.test(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
leveneTest(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
leveneTest(cbind(mb, bh, bl, nh) ~ epoch, data = skulls, Method="U")
leveneTest(cbind(mb, bh, bl, nh) ~ epoch, data = skulls, Method="C")
leveneTest(cbind(mb, bh, bl, nh) ~ epoch, data = skulls, Method="C")
leveneTest(c(mb, bh, bl, nh) ~ epoch, data = skulls, Method="C")
leveneTest(nh ~ epoch, data = skulls, Method="C")
leveneTest(c(nh,nb) ~ epoch, data = skulls, Method="C")
leveneTest(c(nh,bh) ~ epoch, data = skulls, Method="C")
responses <- as.matrix(skulls[,2:5])
results <- data.frame(var = colnames(responses), p = rep(NA,dim(responses)[2]))
results$p <- apply(responses,2,function(x) {leveneTest(x ~ as.factor(mtcars$am)*as.factor(mtcars$vs))[1,3]})
results$p <- apply(responses,2,function(x) {leveneTest(x ~ epoch)[1,3]})
results
bm <- boxM(skulls[,2:5], skulls) # using all but the independent column
bm <- boxM(skulls[,2:5], epochs) # using all but the independent column
bm <- boxM(skulls[,2:5], epoch) # using all but the independent column
plot(bm)
bm
par(skulls[,2:5])
par(skulls)
par(skulls)
par(skulls)
par(skulls)
scatterplot(mb)
scatterplot(mb,bh)
scatterplot(bh,bl)
responses <- as.matrix(skulls[,2:5])
results.pearson <- data.frame(var = colnames(responses), p = rep(NA,dim(responses)[2]))
View(results.pearson)
results.pearson <- data.frame(var = colnames(responses), mb = rep(NA,dim(responses)[2]), bh = rep(NA,dim(responses)[2])
bl = rep(NA,dim(responses)[2]),nh = rep(NA,dim(responses)[2]))
results.pearson <- data.frame(var = colnames(responses), mb = rep(NA,dim(responses)[2]), bh = rep(NA,dim(responses)[2]),
bl = rep(NA,dim(responses)[2]), nh = rep(NA,dim(responses)[2]))
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)[1,3]})
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)[1,4]})
mb
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)})
View(results)
results.pearson <- data.frame(var = colnames(responses), mb = rep(NA,dim(responses)[2]), bh = rep(NA,dim(responses)[2]),
bl = rep(NA,dim(responses)[2]), nh = rep(NA,dim(responses)[2]))
View(results.pearson)
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)})
mb[1]
results.pearson$mb
results.pearson$mb[1]
results.pearson$mb[1]$mb
results.pearson$mb[1]$p
a<- cor.test(mb,nh)
a
a$p.value
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)$p.value})
responses <- as.matrix(skulls[,2:5])
results.pearson <- data.frame(var = colnames(responses), mb = rep(NA,dim(responses)[2]), bh = rep(NA,dim(responses)[2]),
bl = rep(NA,dim(responses)[2]), nh = rep(NA,dim(responses)[2]))
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)$p.value})
results.pearson$bh <- apply(responses,2,function(x) {cor.test(x,bh)$p.value})
results.pearson$bl <- apply(responses,2,function(x) {cor.test(x,bl)$p.value})
results.pearson$nh <- apply(responses,2,function(x) {cor.test(x,nh)$p.value})
results.pearson
data(PimaIndiansDiabetes)
write.csv(PimaIndiansDiabetes, "PimaIndians.csv", row.names = F)
View(PimaIndiansDiabetes)
str(PimaIndiansDiabetes)
outliers <- aq.plot(skulls[,2:5])
outliers # show list of outliers
data(Wolves)
library(candisc)
install.packages("candisc")
data(wolves)
data(Wolves)
library(candisc)
data(Wolves)
data(Wolves)
data(Wolves)
data(Wolves)
data(Wolves)
wolves <- read.table('wolves.rtf', header = T)
wolves <- read.table('wolves.rtf', header = T, sep = " ")
wolves <- read.table('wolves.rtf', header = T, sep = " ")
wolves <- read.table('wolves.rtf', header = T, sep = " ", skip = 1)
wolves <- read.table('wolves.rtf', header = F, sep = " ", skip = 1)
wolves <- read.table('Wolves.txt', header = T, sep = " ")
write.csv(Wolves, 'Wolves.csv,)
_\
]''
Location Group Sex X1 X2 X3 X4 X5 X6 X7 X8 X9
rm rmm1 m 126 104 141 81.0 31.8 65.7 50.9 44.0 18.2
rm rmm2 m 128 111 151 80.4 33.8 69.8 52.7 43.2 18.5
rm rmm3 m 126 108 152 85.7 34.7 69.1 49.3 45.6 17.9
rm rmm4 m 125 109 141 83.1 34.0 68.0 48.2 43.8 18.4
rm rmm5 m 126 107 143 81.9 34.0 66.1 49.0 42.4 17.9
rm rmm6 m 128 110 143 80.6 33.0 65.0 46.4 40.2 18.2
rm rmf1 f 116 102 131 76.7 31.5 65.0 45.4 39.0 16.8
rm rmf2 f 120 103 130 75.1 30.2 63.8 44.4 41.1 16.9
rm rmf3 f 116 103 125 74.7 31.6 62.4 41.3 44.2 17.0
ar arm1 m 117  99 134 83.4 34.8 68.0 40.7 37.1 17.2
ar arm2 m 115 100 149 81.0 33.1 66.7 47.2 40.5 17.7
ar arm3 m 117 106 142 82.0 32.6 66.0 44.9 38.2 18.2
ar arm4 m 117 101 144 82.4 32.8 67.5 45.3 41.5 19.0
ar arm5 m 117 103 149 82.8 35.1 70.3 48.3 43.7 17.8
ar arm6 m 119 101 143 81.5 34.1 69.1 50.1 41.1 18.7
ar arm7 m 115 102 146 81.4 33.7 66.4 47.7 42.0 18.2
ar arm8 m 117 100 144 81.3 37.2 66.8 41.4 37.6 17.7
ar arm9 m 114 102 141 84.1 31.8 67.8 47.8 37.8 17.2
ar arm10 m 110  94 132 76.9 30.1 62.1 42.0 40.4 18.1
ar arf1 f 112  94 134 79.5 32.1 63.3 44.9 42.7 17.7
ar arf2 f 109  91 133 77.9 30.6 61.9 45.2 41.2 17.1
ar arf3 f 112  99 139 77.2 32.7 67.4 46.9 40.9 18.3
ar arf4 f 112  99 133 78.5 32.5 65.5 44.2 34.1 17.5
ar arf5 f 113  97 146 84.2 35.4 68.7 51.0 43.6 17.2
ar arf6 f 107  97 137 78.1 30.7 61.6 44.9 37.3 16.5
))
))))))))))
∫
,
,
,,
-
))))
slf'pkwapoe fv[aepsd ktgmPO:SDFB{_?
'
''
'''''
write.csv(Wolves, 'Wolves.csv', row.names = F)
wolves <- read.csv('Wolves.csv', header = T)
View(wolves)
attach(wolves)
wolf.manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ group, data=Wolves)
wolf.manova <- manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ group, data=Wolves)
summary(wolf.manova)
summary.aov(wolf.manova)
wolf.mod2 <-manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ location*sex, data=Wolves)
summary(wolf.mod2)
summary.aov(wolf.mod2)
wolf.mod2 <-manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ location+sex, data=Wolves)
summary(wolf.mod2)
summary(multivar.exp1, test = "Pillai")
summary(multivar.exp1, test = "Wilks")
summary(multivar.exp1, test = "Hotelling-Lawley")
summary(multivar.exp1, test = "Roy")
results.pearson
responses <- as.matrix(skulls[,2:5])
results.pearson <- data.frame(var = colnames(responses), mb = rep(NA,dim(responses)[2]), bh = rep(NA,dim(responses)[2]),
bl = rep(NA,dim(responses)[2]), nh = rep(NA,dim(responses)[2]))
results.pearson$mb <- apply(responses,2,function(x) {cor.test(x,mb)$p.value})
results.pearson$bh <- apply(responses,2,function(x) {cor.test(x,bh)$p.value})
results.pearson$bl <- apply(responses,2,function(x) {cor.test(x,bl)$p.value})
results.pearson$nh <- apply(responses,2,function(x) {cor.test(x,nh)$p.value})
results.pearson
a<- cor.test(mb,nh)
a
mshapiro.test(t(data.matrix(skulls[,2:5])))
results.levene
results.levene <- data.frame(var = colnames(responses), p = rep(NA,dim(responses)[2]))
results.levene$p <- apply(responses,2,function(x) {leveneTest(x ~ epoch)[1,3]})
results.levene
bm <- boxM(skulls[,2:5], epoch) #Box's-M test
plot(bm)
bm
plot(bm)
summary(multivar.exp1, test = "Pillai")
summary.aov(multivar.exp1)
summary(wolf.model)
summary.aov(wolf.model)
wolf.model <- manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ group, data=Wolves)
summary(wolf.model)
summary.aov(wolf.model)
#load the skulls dataset
skulls <- read.csv("skulls.csv", header = T)
#attach columns
attach(skulls)
means <- tapply(1:nrow(skulls), skulls$epoch, function(i)
apply(skulls[i,colnames(skulls)[-1]], 2, mean))
means <- matrix(unlist(means), nrow = length(means), byrow = TRUE)
colnames(means) <- colnames(skulls)[-1]
rownames(means) <- levels(skulls$epoch)
means
#we want to organize our data into independent and dependent variables
#get the independent var names
skull.colnames <- as.character(unique(skulls$epoch))
#lets take a look at boxplots
par(mfrow = c(2, 2))
#mb
boxplot(data.frame(skulls$mb[skulls$epoch == skull.colnames[1]], skulls$mb[skulls$epoch == skull.colnames[2]],
skulls$mb[skulls$epoch == skull.colnames[3]], skulls$mb[skulls$epoch == skull.colnames[4]], skulls$mb[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "maximum breadth", col = c('blue', 'red', 'yellow', 'pink'))
#basibregmatic height
boxplot(data.frame(skulls$bh[skulls$epoch == skull.colnames[1]], skulls$bh[skulls$epoch == skull.colnames[2]],
skulls$bh[skulls$epoch == skull.colnames[3]], skulls$bh[skulls$epoch == skull.colnames[4]], skulls$bh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "basibregmatic height", col = c('blue', 'red', 'yellow', 'pink'))
#basialiveolar length
boxplot(data.frame(skulls$bl[skulls$epoch == skull.colnames[1]], skulls$bl[skulls$epoch == skull.colnames[2]],
skulls$bl[skulls$epoch == skull.colnames[3]], skulls$bl[skulls$epoch == skull.colnames[4]], skulls$bl[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "basialiveolar length", col = c('blue', 'red', 'yellow', 'pink'))
#nasal length
boxplot(data.frame(skulls$nh[skulls$epoch == skull.colnames[1]], skulls$nh[skulls$epoch == skull.colnames[2]],
skulls$nh[skulls$epoch == skull.colnames[3]], skulls$nh[skulls$epoch == skull.colnames[4]], skulls$nh[skulls$epoch == skull.colnames[5]]) , las = 1, xlab = 'epochs',
names = skull.colnames, ylab = "nasal length", col = c('blue', 'red', 'yellow', 'pink'))
#comparing two specific epochs
multivar.exp2 <- manova( cbind(mb, bh, bl, nh) ~ epoch, data = skulls, subset = epoch %in% c("c4000BC", "c200BC"))
summary(multivar.exp2)
summary.aov(multivar.exp1)
cor(cbind(mb, bh, bl, nh))
# Graphical Assessment of Multivariate Normality (Mahalanobis^2 distance will be approximately a chi-square distribution with p degrees of freedom)
x <- as.matrix(skulls[,2:5]) # n x p numeric matrix
center <- colMeans(x) # centroid
n <- nrow(x); p <- ncol(x); cov <- cov(x);
d <- mahalanobis(x,center,cov) # distances
qqplot(qchisq(ppoints(n),df=p),d,
main="QQ Plot Assessing Multivariate Normality",
ylab="Mahalanobis D2")
abline(a=0,b=1)
# Graphical Assessment of Multivariate Normality (Mahalanobis^2 distance will be approximately a chi-square distribution with p degrees of freedom)
x <- as.matrix(skulls[,2:5]) # n x p numeric matrix
center <- colMeans(x) # centroid
n <- nrow(x); p <- ncol(x); cov <- cov(x);
d <- mahalanobis(x,center,cov) # distances
qqplot(qchisq(ppoints(n),df=p),d,
main="QQ Plot Assessing Multivariate Normality",
ylab="Mahalanobis D2")
abline(a=0,b=1)
outliers <- aq.plot(skulls[,2:5])
outliers
skulls2 <- skulls[,c(-34,-78,-4,-149)]
skulls2 <- skulls[c(-34,-78,-4,-149),]
outliers <- aq.plot(skulls2[,2:5])
str(wolves)
wolf.model <- manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ group, data=Wolves)
summary(wolf.model)
summary.aov(wolf.model)
wolf.mod2 <-manova(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ location*sex, data=Wolves)
summary(wolf.mod2)
summary.aov(wolf.mod2)
#checking outliers using the mahalanobis distance
outliers <- aq.plot(skulls[,2:5])
