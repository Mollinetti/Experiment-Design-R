y<- rnorm(50, mean = 13.8, sd = 1.0654)
z<- rnorm(50, mean = 13.3, sd = 1.23)
w<- rnorm(50, mean = 13.5, sd = 1.18)
t<- rnorm(50, mean = 13.5, sd = 1.18)
k<- rnorm(50, mean = 13.5, sd = 1.18)
p<- rnorm(50, mean = 13.5, sd = 1.18)
n<- rnorm(50, mean = 13.5, sd = 1.18)
m<- rnorm(50, mean = 13.5, sd = 1.18)
df<-data.frame(x,y,z,w)
colnames(df) <- c('Control','Test1','Test2','Test3','Test4','Test5','Test6','Test7','Test8','Test9')
df <- apply(df, 2, function(x) round(x,digits = 2))
write.csv(df, file = 'Block_Hemo_exp.csv', row.names = F)
colnames(df) <- c('Control','Test1','Test2','Test3','Test4','Test5','Test6','Test7','Test8')
df <- apply(df, 2, function(x) round(x,digits = 2))
write.csv(df, file = 'Block_Hemo_exp.csv', row.names = F)
df<-data.frame(x,y,z,w,t,j,p,n,m)
colnames(df) <- c('Control','Test1','Test2','Test3','Test4','Test5','Test6','Test7','Test8')
df<-data.frame(x,y,z,w,t,j,p,n,m)
df<-data.frame(x,y,z,w,t,k,p,n,m)
colnames(df) <- c('Control','Test1','Test2','Test3','Test4','Test5','Test6','Test7','Test8')
df <- apply(df, 2, function(x) round(x,digits = 2))
write.csv(df, file = 'Block_Hemo_exp.csv', row.names = F)
#load our dataset
hemo <- read.csv('Hemo_exp.csv')
#load the assimetric data
assim_hemo<- read.csv('Assimetric_Hemo_exp.csv')
#load the block data
block_hemo <- read.csv('Block_Hemo_exp.csv')
plot(hemo)
boxplot(hemo)
boxplot(hemo , las = 1)
boxplot(hemo , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
anova(hemo)
View(hemo)
aov(hemo)
ely Randomized Design)
aov.ex1 <- aov(data = hemo)
View(block_hemo)
View(hemo)
packages_needed <- c('car', 'manip')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
packages_needed <- c('car', 'reshape2')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
melt(hemo)
m.hemo <- melt(hemo)
View(m.hemo)
View(m.hemo)
colnames(m.hemo)<- c('Group', 'Bloodlv')
View(m.hemo)
View(m.hemo)
aov.ex1 <- aov(Bloodlv~Group,data = hemo)
aov.ex1 <- aov(m.hemo$Bloodlv~m.hemo$Group,data = hemo)
aov.ex1
summary(aov.ex1)
confint(aov.ex1, level = 0.95)
confint(aov.ex1, level = 0.90)
packages_needed <- c('car', 'reshape2', 'multcomp')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
aov.ex1.pairwise <- glht(aov.ex1)
confint(aov.ex1.pairwise)
confint(aov.ex1, level = 0.90)
plot(aov.ex1.pairwise)
plot(aov.ex1)
aov.ex1.pairwise <- glht(aov.ex1, infct = mcp(tension = "Means"))
plot(aov.ex1.pairwise)
confint(aov.ex1.pairwise)
confint(aov.ex1, level = 0.90)
aov.ex1.pairwise <- glht(aov.ex1, infct = mcp(tension = "Tukey"))
confint(aov.ex1.pairwise)
plot(aov.ex1.pairwise)
aov.ex1.pairwise <- glht.mmc(aov.ex1, infct = mcp(tension = "Tukey"))
plot(aov.ex1.pairwise)
packages_needed <- c('car', 'reshape2', 'HH')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
aov.ex1.pairwise <- glht.mmc(aov.ex1, infct = mcp(tension = "Tukey"))
plot(aov.ex1.pairwise)
aov.ex1.pairwise <- glht.mmc(aov.ex1, linfct = mcp(m.hemo$Group= "Tukey"))
aov.ex1.pairwise <- glht.mmc(aov.ex1, linfct = mcp(Group= "Tukey"))
library(HH)
aov.ex1.pairwise <- glht.mmc(aov.ex1, linfct = mcp(Group= "Tukey"))
plot(aov.ex1.pairwise)
aov.ex1.pairwise <- glhtWithMCP.993c(aov.ex1, linfct = mcp(Group= "Tukey"))
aov.ex1.pairwise <- mmc(aov.ex1, linfct = mcp(Group= "Tukey"))
aov.ex1.pairwise <- mmc(aov.ex1)
plot(aov.ex1.pairwise)
mmcplot(aov.ex1.pairwise)
summary(aov.ex1.pairwise)
aov.ex1.pairwise
View(hemo)
View(m.hemo)
View(hemo)
View(m.hemo)
View(hemo)
m.assim_hemo<- melt(assim_hemo)
View(m.assim_hemo)
aov.ex2 <- aov(m.assim_hemo$Bloodlv~m.assim_hemo$Group,data = assim_hemo)
#melt the unbalanced data
m.assim_hemo<- melt(assim_hemo)
#change the names of the cols
colnames(m.hemo)<- c('Group', 'Bloodlv')
View(m.assim_hemo)
#change the names of the cols
colnames(m.assim_hemo)<- c('Group', 'Bloodlv')
View(m.assim_hemo)
aov.ex2 <- aov(m.assim_hemo$Bloodlv~m.assim_hemo$Group,data = assim_hemo)
View(aov.ex2)
#checking the result of the anova
summary(aov.ex1)
summary(aov.ex2)
confint(aov.ex2, level = 0.90)
plot(aov.ex2)
aov.ex1.pairwise <- mmc(aov.ex2)
aov.ex1.pairwise
mmcplot(aov.ex2.pairwise)
aov.ex2.pairwise <- mmc(aov.ex2)
aov.ex2.pairwise
mmcplot(aov.ex2.pairwise)
packages_needed <- c('car', 'reshape2', 'HH', 'lme4')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
#load the block data
block_hemo <- read.csv('Block_Hemo_exp.csv')
#load the block data
block_hemo <- read.csv('Block_Hemo_exp.csv')
#melt the data
m.block_hemo<- melt(block_hemo )
#change the names of the cols
colnames(m.block_hemo)<- c('Group', 'Bloodlv')
View(m.hemo)
View(m.block_hemo)
fit.block<- lmer(m.block_hemo$Bloodlv ~ (1|m.block_hemo$Group), data = m.block_hemo)
summary(fit.block)
#get the confidence intervals
confint(fit.block, oldNames = FALSE)
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = block_hemo)
options(contrasts = c("contr.sum", "contr.poly"))
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = block_hemo)
confint(aov.block)
ranef(fit.block)
mmc(fit.block)
mmc(aov.block)
View(m.block_hemo)
blk <- gl(9, 50, 9*50)
blk
blk <- seq(1:50)
blk <- repeat(seq(1:50),9)
blk <- repeat(seq(1:50))
blk <- repeat(9,seq(1:50))
blk <- rep(seq(1:50),9)
blk
m.block_hemo <- c(m.block_hemo, blk)
m.block_hemo <- data.frame(m.block_hemo, blk)
View(m.block_hemo)
m.block_hemo<- melt(block_hemo)
m.block_hemo <- data.frame(m.block_hemo, blk)
View(m.block_hemo)
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group + m.block_hemo$blk,data = hemo)
#melt the data
m.block_hemo<- melt(block_hemo)
#change the names of the cols
colnames(m.block_hemo)<- c('Group', 'Bloodlv')
m.block_hemo <- data.frame(m.block_hemo, blk)
View(m.block_hemo)
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group + m.block_hemo$blk,data = hemo)
#checking the result of the anova
summary(aov.block)
confint(aov.block, level = 0.90)
plot(aov.block)
aov.block.pairwise <- mmc(aov.block)
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = hemo)
summary(aov.block)
aov.block.pairwise <- mmc(aov.block)
mmcplot(aov.ex1.pairwise)
aov.ex1.pairwise <- mmc(aov.ex1)
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(m.hemo$Group = "Tukey"))
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(Group = "Tukey"))
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(m.hemo$Group = "Tukey"))
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(Group = "Tukey"))
aov.ex1
aov.ex1
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(m.hemo$Group = "Tukey"))
group <- m.hemo$Group
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = hemo)
summary(aov.ex1)
aov.ex1.pairwise <- glht(aov.ex1, linfct = mcp(group = "Tukey"))
aov.ex1.pairwise <- mmc(aov.ex1)
aov.ex1.pairwise <- mmc(aov.ex1.pairwise)
aov.ex1.pairwise <- mmc(aov.ex1, linfct = mcp(group = "Tukey"))
#BEFORE STARTING OUR CLASS, PLEASE RUN THIS SNIPPET TO INSTALL/LOAD OUR LIBRARIES NEEDED FOR THIS LESSON
packages_needed <- c('car', 'reshape2', 'HH', 'lme4')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
#load our dataset
hemo <- read.csv('Hemo_exp.csv')
#boxplot of the hemo data
boxplot(hemo , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
#we want to organize our data into independent and dependent variable
#lets get a 'molten' dataset
m.hemo <- melt(hemo)
#change the names of the cols
colnames(m.hemo)<- c('Group', 'Bloodlv')
#One Way Anova (Completely Randomized Design)
group <- m.hemo$Group
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = hemo)
aov.ex1.pairwise <- mmc(aov.ex1.pairwise)
aov.ex1.pairwise <- mmc(aov.ex1)
View(hemo)
contrasts(hemo)
View(m.hemo)
contrasts(m.hemo)
contrasts(m.hemo$Group)
contrasts(m.hemo$Bloodlv)
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = m.hemo)
aov.ex1.pairwise <- mmc(aov.ex1)
group <- m.hemo$Group
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = m.hemo)
#lets see the confidence intervals generated by the anova
confint(aov.ex1, level = 0.90)
plot(aov.ex1)
aov.ex1.pairwise <- mmc(aov.ex1, linfct = mcp(group = "Tukey"))
options(contrasts = rep ("contr.treatment", 2))
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = m.hemo)
aov.ex1.pairwise <- mmc(aov.ex1)
#Run the ANOVA with the random design
#use the library lm4 to fit a linear model
fit.block<- lmer(m.block_hemo$Bloodlv ~ (1|m.block_hemo$Group), data = m.block_hemo)
#the (1| ) notation means the granularity of the random effect alpha
#run the summary
summary(fit.block)
#get the confidence intervals
confint(fit.block, oldNames = FALSE)
#lets see what happens when we use the aov
options(contrasts = c("contr.sum", "contr.poly"))
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = block_hemo)
#confidence intervals of the anova
confint(aov.block)
## "estimated" (better: conditional means of) random effects
ranef(fit.block)
#set the constrasts
options(contrasts = rep ("contr.treatment", 2))
fit.block<- lmer(m.block_hemo$Bloodlv ~ (1|m.block_hemo$Group), data = m.block_hemo)
#load the block data
block_hemo <- read.csv('Block_Hemo_exp.csv')
#melt the data
m.block_hemo<- melt(block_hemo)
#change the names of the cols
colnames(m.block_hemo)<- c('Group', 'Bloodlv')
#Run the ANOVA with the random design
#use the library lm4 to fit a linear model
fit.block<- lmer(m.block_hemo$Bloodlv ~ (1|m.block_hemo$Group), data = m.block_hemo)
#the (1| ) notation means the granularity of the random effect alpha
#run the summary
summary(fit.block)
#get the confidence intervals
confint(fit.block, oldNames = FALSE)
#lets see what happens when we use the aov
options(contrasts = c("contr.sum", "contr.poly"))
aov.block <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = block_hemo)
#confidence intervals of the anova
confint(aov.block)
## "estimated" (better: conditional means of) random effects
ranef(fit.block)
options(contrasts = rep ("contr.treatment", 2))
#pairwise confidence
aov.block.pairwise <- mmc(aov.block)
aov.block.pairwise
mmcplot(aov.block.pairwise)
mmcplot(aov.block.pairwise)
mmcplot(aov.block.pairwise, ylab="Comparison of Levels")
plot(aov.block)
post_hoc.block <- TukeyHSD(aov.block, 'm.block_hemo$Group', conf.level =0.95)
post_hoc.block
post_hoc.ex1<- TukeyHSD(aov.ex1, 'm.block_hemo$Group', conf.level =0.95)
post_hoc.ex1
post_hoc.ex1<- TukeyHSD(aov.ex1, 'm.block_hemo$Group', conf.level =0.95)
post_hoc.ex1<- TukeyHSD(aov.ex1, 'm.hemo$Group', conf.level =0.95)
post_hoc.ex1<- TukeyHSD(aov.ex1, 'group', conf.level =0.95)
post_hoc.ex1
post_hoc.ex2<- TukeyHSD(aov.ex2, 'm.assim_hemo$Group', conf.level =0.95)
post_hoc.ex2
assim_hemo<- read.csv('Assimetric_Hemo_exp.csv')
#melt the unbalanced data
m.assim_hemo<- melt(assim_hemo)
#change the names of the cols
colnames(m.assim_hemo)<- c('Group', 'Bloodlv')
aov.ex2 <- aov(m.assim_hemo$Bloodlv~m.assim_hemo$Group,data = m.assim_hemo)
#tukey post hoc
post_hoc.ex2<- TukeyHSD(aov.ex2, 'm.assim_hemo$Group', conf.level =0.95)
post_hoc.ex2
Gender <- c(rep('m',10),rep('f',10))
Gender
Gender <- rep(c(rep('m',10),rep('f',10)),3)
m.hemo_2 <- data.frame(m.hemo,Gender)
Gender <- rep(c(rep('m',10),rep('f',10)),4)
m.hemo_2 <- data.frame(m.hemo,Gender)
View(m.hemo_2)
aov.two<- aov(m.hemo_2$Bloodlv~m.hemo_2$Group * m.hemo_2$Gender,data = m.hemo_2)
summary(aov.two)
confint(aov.two, level = 0.90)
post_hoc.two <- TukeyHSD(aov.two, 'm.block_hemo$Group', conf.level =0.95)
#tukey post hoc
post_hoc.two <- TukeyHSD(aov.two, 'm.block_hemo$Group', conf.level =0.95, which = 'm.block_hemo$Group')
post_hoc.two <- TukeyHSD(aov.two, 'm.hemo_2$Group', conf.level =0.95)
post_hoc.block
m.hemo_2 <- data.frame(m.hemo,Gender)
aov.two<- aov(m.hemo_2$Bloodlv~m.hemo_2$Group * m.hemo_2$Gender,data =m.hemo_2)
summary(aov.two)
confint(aov.two, level = 0.90)
plot(aov.two)
post_hoc.two <- TukeyHSD(aov.two, 'm.hemo_2$Group', conf.level =0.95)
post_hoc.two
#set the constrasts
options(contrasts = rep ("contr.treatment", 2))
#pairwise confidence
aov.two.pairwise <- mmc(aov.two)
aov.two.pairwise
mmcplot(aov.two.pairwise, ylab="Comparison of Levels")
aov.two.pairwise <- mmc(aov.two)
aov.two.pairwise <- mmc(aov.two)
aov.two.pairwise <- mmc(aov.two, linfct = mcp(group = "Tukey"))
group = m.hemo_2$Group
aov.two.pairwise <- mmc(aov.two, linfct = mcp(group = "Tukey"))
group = m.hemo_2$Group
aov.two.pairwise <- mmc(aov.two, linfct = mcp(group = "Tukey"))
group = m.hemo_2$Group
#Two way anova without error
aov.two<- aov(m.hemo_2$Bloodlv~group * m.hemo_2$Gender,data =m.hemo_2)
summary(aov.two)
aov.two.pairwise <- mmc(aov.two, linfct = mcp(group = "Tukey"))
aov.two.pairwise
mmcplot(aov.two.pairwise, ylab="Comparison of Levels")
#variables
conf_alpha<- 0.95
power_beta<- 0.85
pilot_n <- 6
sleep_pilot <- read.csv('sleep_exp_pilot.csv', header = TRUE)
View(sleep_pilot)
power.t.test(n = 6, delta = 1, sd = sd(sleep_pilot$Control), sig.level = 0.05, type = "one.sample")
power.t.test(n = 6, delta = 1, sd = sd(sleep_pilot$Test), sig.level = 0.05, type = "one.sample")
power.t.test(n = 6, delta = 1, sd = sd(sleep_pilot$Placebo), sig.level = 0.05, type = "one.sample")
setwd("~/Dropbox/Doutorado/R-repo/Datasets")
setwd("~/Dropbox/Doutorado/R-repo/Datasets")
power.t.test(power = 0.85, delta = 1, sd = sd(sleep_pilot$Control), sig.level = 0.05, type = "one.sample")
sleep_main <- read.csv('sleep_exp_main.csv')
View(sleep_main)
summary(sleep_main)
#NORMALITY TEST FOR THE DATA
par(mfrow=c(1,3))
qqPlot(sleep_main$Control, cex=1.5,pch=16, las=1)
qqPlot(sleep_main$Test, cex=1.5,pch=16, las=1)
qqPlot(sleep_main$Placebo, cex=1.5,pch=16, las=1)
res_shapiro <- list("Control" = NULL, "Test" = NULL, "Placebo" = NULL)
for(c in colnames(sleep_main)){
res_shapiro[[c]] <- shapiro.test(df[[c]])
}
res_shapiro[['Control']]
res_shapiro[['Test']]
res_shapiro[['Placebo']]
for(c in colnames(sleep_main)){
res_shapiro[[c]] <- shapiro.test(df[[c]])
}
for(c in colnames(sleep_main)){
res_shapiro[[c]] <- shapiro.test(sleep_main[[c]])
}
res_shapiro[['Control']]
res_shapiro[['Test']]
res_shapiro[['Placebo']]
#HETEROSCEDASCITY
#fligner kileen test
fligner.test(sleep_main)
resids <- apply(sleep_main, 1, function (x) (x- mean(x)))
resids <- list("Test" = resids[1,], "Control" = resids[2,], "Placebo" = resids[3,] )
stripchart(x = resids,
vertical =  TRUE,
pch = 16,
cex = 1.5,
las= 1,
xlab = 'mean',
ylab = 'residuals')
#durbin watson for three samples
durbinWatsonTest(lm(sleep_main$Control + sleep_main$Test + sleep_main$Placebo ~1))
cor(sleep_main)
cov(sleep_main)
t.test(sleep_main$Control, sleep_main$Test, var.equal = TRUE, paired = TRUE, conf.level = 0.95)
t.test(sleep_main$Control, sleep_main$Placebo, var.equal = TRUE, paired = TRUE, conf.level = 0.95)
t.test(sleep_main$Test, sleep_main$Placebo, var.equal = TRUE, paired = TRUE, conf.level = 0.95)
#BEFORE STARTING OUR CLASS, PLEASE RUN THIS SNIPPET TO INSTALL/LOAD OUR LIBRARIES NEEDED FOR THIS LESSON
packages_needed <- c('car', 'reshape2', 'HH', 'lme4')
for (package_name in packages_needed) {
if (!(package_name %in% rownames(installed.packages()))){
install.packages(package_name)
}
}
for (i in 1:length(packages_needed))
{
library(packages_needed[[i]],character.only=TRUE)
}
#load our dataset
hemo <- read.csv('Hemo_exp.csv')
View(hemo)
View(hemo)
#boxplot of the hemo data
boxplot(hemo , las = 1, xlab = 'Groups', ylab = "Hemoglobin Level (g/dL)", col = 'blue')
m.hemo <- melt(hemo)
View(m.hemo)
colnames(m.hemo)<- c('Group', 'Bloodlv')
group <- m.hemo$Group
aov.ex1 <- aov(m.hemo$Bloodlv~group,data = m.hemo)
summary(aov.ex1)
confint(aov.ex1, level = 0.90)
post_hoc.ex1<- TukeyHSD(aov.ex1, 'group', conf.level =0.95)
post_hoc.ex1
#set the contrasts
options(contrasts = rep ("contr.treatment", 2))
aov.ex1.pairwise <- mmc(aov.ex1, linfct = mcp(group = "Tukey"))
aov.ex1.pairwise
mmcplot(aov.ex1.pairwise)
#load the unbalanced data
assim_hemo<- read.csv('Assimetric_Hemo_exp.csv')
View(assim_hemo)
#melt the unbalanced data
m.assim_hemo<- melt(assim_hemo)
View(m.assim_hemo)
colnames(m.assim_hemo)<- c('Group', 'Bloodlv')
aov.ex2 <- aov(m.assim_hemo$Bloodlv~m.assim_hemo$Group,data = m.assim_hemo)
summary(aov.ex2)
post_hoc.ex2<- TukeyHSD(aov.ex2, 'm.assim_hemo$Group', conf.level =0.95)
post_hoc.ex2
confint(aov.ex2, level = 0.90)
options(contrasts = rep ("contr.treatment", 2))
#pairwise confidence
aov.ex2.pairwise <- mmc(aov.ex2)
aov.ex2.pairwise
mmcplot(aov.ex2.pairwise)
block_hemo <- read.csv('Block_Hemo_exp.csv')
View(block_hemo)
m.block_hemo<- melt(block_hemo)
colnames(m.block_hemo)<- c('Group', 'Bloodlv')
fit.rand<- lmer(m.block_hemo$Bloodlv ~ (1|m.block_hemo$Group), data = m.block_hemo)
summary(fit.rand)
confint(fit.rand, oldNames = FALSE)
options(contrasts = c("contr.sum", "contr.poly"))
aov.rand <- aov(m.block_hemo$Bloodlv~m.block_hemo$Group,data = m.block_hemo)
confint(aov.rand)
post_hoc.rand <- TukeyHSD(aov.rand, 'm.block_hemo$Group', conf.level =0.95)
post_hoc.rand
ranef(fit.rand)
#set the constrasts
options(contrasts = rep ("contr.treatment", 2))
#pairwise confidence
aov.rand.pairwise <- mmc(aov.rand)
aov.rand.pairwise
mmcplot(aov.rand.pairwise)
plot(post_hoc.ex1)
#plot of the tukey test
plot(post_hoc.ex1)
plot(post_hoc.ex1, las = 1)
plot(post_hoc.ex1, las = 2)
plot(post_hoc.ex1, las = 1)
plot(post_hoc.ex1, las = 1)
axis(2,cex.axis=2)
plot(post_hoc.ex1, las = 1, cex.lab = 3)
plot(post_hoc.ex1, las = 1, cex.lab = 3)
plot(post_hoc.ex1, las = 1, cex.lab = 1)
plot(post_hoc.ex1, las = 1, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(post_hoc.ex1, las = 1, cex.lab=0.5, cex.axis=0.5, cex.main=0.5, cex.sub=0.5)
